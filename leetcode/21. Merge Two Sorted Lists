/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode ans;
        ListNode head;
 
       
        if(list1==null)
            return list2;
        else if(list2==null)
             {
             return list1;
               
            }
       else if (list2==null&&list1==null)
            {
               return null;
            }
      
        if(list1.val<=list2.val)
        {
            ans=head=new ListNode(list1.val);
            list1=list1.next;
        }
        else
        {
            ans=head=new ListNode(list2.val);
             list2=list2.next;
        }
        
        while(list1!=null&&list2!=null)
        {
                 if(list1.val<=list2.val)
            {
                head.next=new ListNode(list1.val);
                     list1=list1.next;
            }
            else
            {
                head.next=new ListNode(list2.val);
                 list2=list2.next;
            }
            head=head.next;
        }
        
         while(list1!=null)
        {
               
            head.next=new ListNode(list1.val);
            list1=list1.next;
             head=head.next;
        }
          while(list2!=null)
        {
               
            head.next=new ListNode(list2.val);
            list2=list2.next;
           head=head.next;
        }
        
        return ans;
        /*
        
        while(list1.next!=null&&list2.next!=null)
        {   
           if(list1.next!=null)
           {
                  temp.next=a2.next;
           }
            else if(list2.next!=null)
           {
                  temp.next=a1.next;  
           }
            
              if(a1.next.val>=a2.val)
                {   
                    temp.val=a2.val;
                    temp.next=a2.next;
                    temp=temp.next;
                    a2=a2.next;
                }
             else
                {   temp.val=a1.val;
                    temp.next=a2.next;
                    temp=temp.next;
                    a1=a1.next;
                }
        }
        return ans;
        */
    }
}
