// trian.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
//I know this is not good, I just wanna keep this as my 1st attemps.
#include <iostream>
#include<cmath>
const int mapSize =51;
struct coordinate
{
    double x, y, z;
};
void game();
static coordinate k[8] = { {10 ,10,10}, {-10,10,10}, {10,-10,10}, {-10,-10,10},
              {10 ,10,-10}, {-10,10,-10}, {10,-10,-10}, {-10,-10,-10} };


int main()
{
    coordinate line[3][4][20];
    for (int i = 0;i < 3;i++)
    {
        for (int j = 0;j < 4;j++)
        {for (int n = 0;n < 20;n++)
            {
                if (i == 0)
                {
                    line[i][j][n].x=-10+n;
                    line[i][j][n].y=(j>1)?10:-10;
                    line[i][j][n].z=(j ==1||j==3) ? 10 : -10;
                };
                if (i == 1)
                {
                    line[i][j][n].y = -10 + n;
                    line[i][j][n].x = (j > 1) ? 10 : -10;
                    line[i][j][n].z = (j == 1 || j == 3) ? 10 : -10;
                };
                if (i == 2)
                {
                    line[i][j][n].z = -10 + n;
                    line[i][j][n].y = (j > 1) ? 10 : -10;
                    line[i][j][n].x = (j == 1 || j == 3) ? 10 : -10;
                };

            }
    }
}
    char map[mapSize][mapSize] ;
    for (int i = 0; i < mapSize; i++)
    {
        for (int j = 0; j < mapSize; j++)
        {
            map[i][j] = 0;
        }
       
    }
    struct coordinate
    {
        int x, y, z;
    };

    struct square
    {
        coordinate p[8];
    };
   
    int co = 0;
    
   while (1)
    {
        {
           
            double angle = -3.1415926 / 24;
            {for (int p = 0; p < 8; p++)

            {
                double temp1 = k[p].x;
                double temp2 = k[p].y;
                k[p].x = temp1 * cos(angle) - temp2 * sin(angle);
                k[p].y = temp1 * sin(angle) + temp2 * cos(angle);
            }


            for (int p = 0; p < 8; p++)

            {
                double temp1 = k[p].x;
                double temp2 = k[p].z;
                k[p].x = temp1 * cos(angle) + temp2 * sin(angle);
                k[p].z = -temp1 * sin(angle) + temp2 * cos(angle);
            }

            for (int p = 0; p < 8; p++)

            {
                double temp1 = k[p].y;
                double temp2 = k[p].z;
                k[p].y = temp1 * cos(angle) - temp2 * sin(angle);
                k[p].z = temp1 * sin(angle) + temp2 * cos(angle);
            }
            }

           for (int i = 0;i < 3;i++)
                {
                    for (int j = 0;j < 4;j++)
                    {
                        for (int n = 0;n < 20;n++)
                        {
                             double temp1 = line[i][j][n].x;
                             double temp2 =line[i][j][n].y;
                             line[i][j][n].x = temp1 * cos(angle) - temp2 * sin(angle);
                             line[i][j][n].y = temp1 * sin(angle) + temp2 * cos(angle);
                        }
                    }
                }
                
                
                for (int i = 0;i < 3;i++)
                {
                    for (int j = 0;j < 4;j++)
                    {
                        for (int n = 0;n < 20;n++)
                        {
                             double temp1 = line[i][j][n].x;
                             double temp2 =line[i][j][n].z;
                             line[i][j][n].x = temp1 * cos(angle) + temp2 * sin(angle);
                             line[i][j][n].z = -temp1 * sin(angle) + temp2 * cos(angle);
                        }
                    }
                }


                for (int i = 0;i < 3;i++)
                {
                    for (int j = 0;j < 4;j++)
                    {
                        for (int n = 0;n < 20;n++)
                        {
                             double temp1 = line[i][j][n].y;
                             double temp2 =line[i][j][n].z;
                             line[i][j][n].y = temp1 * cos(angle) - temp2 * sin(angle);
                             line[i][j][n].z = temp1 * sin(angle) + temp2 * cos(angle);
                        }
                    }
                }

                int co = 0;

            
                for (int i = 0; i < mapSize; i++)
            {
                for (int j = 0; j < mapSize; j++)
                {
                    for (int p = 0; p < 8; p++)
                    {
                        if (i-17 ==ceil(k[p].x) && j-17 == ceil(k[p].y))
                            co++;
                    }
                    if (co >= 1)
                    {
                       map[i][j]='x';

                    }
                    else 
                    {
                        map[i][j] = 'k';

                    }
                    co = 0;
                }
            }

                for (int i = 0; i < mapSize; i++)
                {
                    for (int j = 0; j < mapSize; j++)

                    {
                        for (int m = 0;m < 3;m++)
                        {
                            for (int n = 0;n < 4;n++)
                            {
                                for (int g = 0;g < 20;g++)
                                {
                                    if ((i - 17) == ceil(line[m][n][g].x) && (j - 17) == ceil(line[m][n][g].y))
                                    {if(g==0||g==(mapSize-1))
                                        map[i][j] = 'x';
                                    else
                                    {
                                        map[i][j] = 'b';
                                    }

                                    }

                                    
                                }
                            }
                        }
                    }
                }

                for (int i = 0; i < mapSize; i++)
                {
                    for (int j = 0; j < mapSize; j++)
                    {
                        if (map[i][j] == 'k')
                            std::cout << " " << " ";
                        else if
                            (map[i][j] == 'x')
                            std::cout << "* ";
                        else if (map[i][j] == 'b')
                            std::cout << "- ";

                    }
                    std::cout << std::endl;

                }

            std::this_thread::sleep_for(std::chrono::milliseconds(500));
           system("cls");
        }
    }

}






